/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnpm;

import static cnpm.Connecting.Connect;
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class updateDetailInvoice extends javax.swing.JPanel {
    ArrayList<String> arrId=new ArrayList<>();
    boolean check;
    int times;

    public int getTimes() {
        return times;
    }

    public void setTimes(int times) {
        this.times = times;
    }
    public boolean isCheck() {
        return check;
    }

    public void setCheck(boolean check) {
        this.check = check;
    }
    String everything;
    int index;
    String idStaff;
    String idInvoice;
    String guestName;
    public String getIdInvoice() {
        return idInvoice;
    }

    public void setIdInvoice(String idInvoice) {
        this.idInvoice = idInvoice;
    }

    public String getGuestName() {
        return guestName;
    }

    public void setGuestName(String guestName) {
        this.guestName = guestName;
    }


    public String getIdStaff() {
        return idStaff;
    }

    public void setIdStaff(String idStaff) {
        this.idStaff = idStaff;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }
    


    public String getEverything() {
        return everything;
    }

    public void setEverything(String everything) {
        this.everything = everything;
    }
    /**
     * Creates new form DetailInvoice
     */
    public updateDetailInvoice() {
        initComponents();
        //LÀM SAU
        panelTool.setVisible(false);
        btReprint.setEnabled(false);
        //set table headt
        tbDetailInvoice.getTableHeader().setFont(new Font("DialogInput",Font.BOLD,14));
        tbDetailInvoice.getTableHeader().setOpaque(false);
        tbDetailInvoice.getTableHeader().setBackground(new Color(204, 204, 255));
        SimpleDateFormat sf=new SimpleDateFormat("dd-MM-yyyy");
        cbDate.setDateFormat(sf);
        getInforDetailInvoiceWithConditionDay();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbDetailInvoice = new javax.swing.JTable();
        cbDate = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        btReprint = new javax.swing.JButton();
        panelTool = new javax.swing.JPanel();
        txtReprint = new javax.swing.JTextField();
        txtDelete = new javax.swing.JTextField();
        btDelete = new javax.swing.JButton();
        cbFormatDate = new javax.swing.JComboBox<>();
        lbTextMoneyForTotal = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbTxtTotal = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1110, 650));
        setRequestFocusEnabled(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\search_30px.png")); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, 41, 40));

        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 240, 41));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 403));

        tbDetailInvoice.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbDetailInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID INVOICE", "GUEST NAME", "DATE", "STAFF NAME", "TONGTIEN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDetailInvoice.setRowHeight(24);
        tbDetailInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDetailInvoiceMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbDetailInvoice);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 700, 280));

        cbDate.setCurrentView(new datechooser.view.appearance.AppearancesList("Dali",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    cbDate.setCalendarPreferredSize(new java.awt.Dimension(400, 300));
    cbDate.setFormat(2);
    cbDate.setWeekStyle(datechooser.view.WeekDaysStyle.SHORT);
    cbDate.setNavigateFont(new java.awt.Font("Sitka Subheading", java.awt.Font.BOLD, 12));
    cbDate.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
        public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
            cbDateOnSelectionChange(evt);
        }
    });
    add(cbDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 180, 40));

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\money.png")); // NOI18N
    add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 250, 270, 260));

    btReprint.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
    btReprint.setText("REPRINT");
    btReprint.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btReprintActionPerformed(evt);
        }
    });
    add(btReprint, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 100, 40));

    panelTool.setOpaque(false);
    panelTool.setPreferredSize(new java.awt.Dimension(120, 70));
    panelTool.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    txtReprint.setText("Reprint");
    txtReprint.setPreferredSize(new java.awt.Dimension(72, 35));
    panelTool.add(txtReprint, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 40));

    txtDelete.setText("Delete");
    txtDelete.setPreferredSize(new java.awt.Dimension(72, 35));
    panelTool.add(txtDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 26, 120, 50));

    add(panelTool, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    btDelete.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
    btDelete.setText("DELETE");
    btDelete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btDeleteActionPerformed(evt);
        }
    });
    add(btDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 100, 40));

    cbFormatDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "By Day", "By Month" }));
    cbFormatDate.setBorder(null);
    cbFormatDate.setOpaque(false);
    cbFormatDate.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbFormatDateItemStateChanged(evt);
        }
    });
    add(cbFormatDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 30, 100, 40));

    lbTextMoneyForTotal.setBackground(new java.awt.Color(0, 0, 0));
    lbTextMoneyForTotal.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 24)); // NOI18N
    lbTextMoneyForTotal.setForeground(new java.awt.Color(0, 0, 0));
    lbTextMoneyForTotal.setText("0");
    add(lbTextMoneyForTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 470, 240, 30));

    jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\accounting.png")); // NOI18N
    add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 70, 70));

    lbTxtTotal.setBackground(new java.awt.Color(0, 0, 0));
    lbTxtTotal.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
    lbTxtTotal.setText("TOTAL:");
    add(lbTxtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 470, 100, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void tbDetailInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDetailInvoiceMouseClicked
                DefaultTableModel dtm=(DefaultTableModel)tbDetailInvoice.getModel();
                AddAccessoriesAndService as=new AddAccessoriesAndService();
                updateGuestCar gc=new updateGuestCar();
                updatePanelGuest pg=new updatePanelGuest();
                
               int row = tbDetailInvoice.getSelectedRow();
               setIndex(row);
               setIdInvoice(String.valueOf(tbDetailInvoice.getValueAt(getIndex(), 0)));
               setGuestName(String.valueOf(tbDetailInvoice.getValueAt(getIndex(), 1)));
               btReprint.setEnabled(true);
              
                    
                   
                   
    }//GEN-LAST:event_tbDetailInvoiceMouseClicked

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        jLabel1.setVisible(true);
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String query=jTextField1.getText().toUpperCase();
        filterData(query);
    }//GEN-LAST:event_jTextField1KeyReleased

    private void btReprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReprintActionPerformed
        // TODO add your handling code here:
         Bill bi=new Bill();
         int input=JOptionPane.showConfirmDialog(null, "Are You Sure For Reprinting?", "CONFIRM", JOptionPane.YES_NO_OPTION);
         if(input==0)
         {
             String guestName=String.valueOf(tbDetailInvoice.getValueAt(getIndex(), 1));
             String idInvoice=String.valueOf(tbDetailInvoice.getValueAt(getIndex(), 0));
          bi.openFilePDF(guestName,idInvoice);
         }
    }//GEN-LAST:event_btReprintActionPerformed

    private void cbFormatDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFormatDateItemStateChanged
        // TODO add your handling code here:
        String format=String.valueOf(cbFormatDate.getEditor().getItem());
        
        if(format.equals("By Month"))
        {
            SimpleDateFormat df=new SimpleDateFormat("MM-yyyy");
            cbDate.setDateFormat(df);
            getInforDetailInvoiceWithConditionMonth();
            
        }
        else
        {
            SimpleDateFormat df=new SimpleDateFormat("dd-MM-yyyy");
            cbDate.setDateFormat(df);
            getInforDetailInvoiceWithConditionDay();
        }
    }//GEN-LAST:event_cbFormatDateItemStateChanged

    private void cbDateOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_cbDateOnSelectionChange
        // TODO add your handling code here:
        getInforDetailInvoiceWithConditionDay();
    }//GEN-LAST:event_cbDateOnSelectionChange

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
                AddAccessoriesAndService as=new AddAccessoriesAndService();
                updateGuestCar gc=new updateGuestCar();
                updatePanelGuest pg=new updatePanelGuest();
                upDateStaffPanel sp=new upDateStaffPanel();
                            
                           int input=JOptionPane.showConfirmDialog(null, "All Data About This Invoice Will Be Deleted! Are You Sure?","CONFIRM", JOptionPane.YES_NO_OPTION);
                           if(input==0)
                           {
                               String idStaff=getIDStaffWithIDInvoice(getIdInvoice());
                               int timesIDStaff=getTimesIDStaff(idStaff);

                                         deleteInvoice(getIdInvoice());
                                          for(String idCar:gc.getIDCarList(getIdGuest(getIndex())))
                                          {
                                              for(String idAccessWithIDCar: as.getAccessoryIDfromIDCar(idCar))
                                              {

                                                      as.deleteAccessDetail(idAccessWithIDCar, idCar);


                                              }

                                          as.deleteAllServiceDetail(idCar); 
                                          }
                                          gc.deleteGuestCar(getIdGuest(getIndex()));
                                          pg.deleteGuest(getIdGuest(getIndex()));
                                          File deleteFile=new File("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Bill PDF\\"+getIdInvoice()+"_"+getGuestName()+".pdf");
                                          deleteFile.delete();
                                          if(sp.getStateStaff(idStaff).equals("1") && timesIDStaff==1)
                                          {
                                                sp.deleteStaff(idStaff);
                                          }
                                          JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                                          if(String.valueOf(cbFormatDate.getEditor().getItem()).equals("By Day"))
                                          {
                                              getInforDetailInvoiceWithConditionDay();
                                          }
                                          else
                                          {
                                              getInforDetailInvoiceWithConditionMonth();
                                          }
                              
                                    

                           }
    }//GEN-LAST:event_btDeleteActionPerformed
public void  filterData(String query)
{
    DefaultTableModel dtm= (DefaultTableModel)tbDetailInvoice.getModel();
    TableRowSorter<DefaultTableModel> tr= new TableRowSorter<DefaultTableModel>(dtm);
    tbDetailInvoice.setRowSorter(tr);
    tr.setRowFilter(RowFilter.regexFilter(query));
}
public void getInforDetailInvoice()
    {
        DefaultTableModel dtm=(DefaultTableModel)tbDetailInvoice.getModel();
        dtm.setRowCount(0);
        
        tbDetailInvoice.setModel(dtm);
        tbDetailInvoice.getColumnModel().getColumn(0).setPreferredWidth(80);
        tbDetailInvoice.getColumnModel().getColumn(1).setPreferredWidth(120);
        tbDetailInvoice.getColumnModel().getColumn(2).setPreferredWidth(60);
        tbDetailInvoice.getColumnModel().getColumn(3).setPreferredWidth(25);
        tbDetailInvoice.getColumnModel().getColumn(4).setPreferredWidth(20);
        tbDetailInvoice.setAutoResizeMode(tbDetailInvoice.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select * from PhieuSuaXe";
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                v=new Vector();
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                dtm.addRow(v);
            }
            tbDetailInvoice.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

 public void createInvoice(String guestID,String date,String staffID,String total)
 {
        try {
            Connection connect=Connect();
            String sql=" insert into PhieuSuaXe (MAKH,NGAY,MANV,TONGTIEN) values (?,?,?,?)";
            PreparedStatement pr=connect.prepareStatement(sql);
            pr.setString(1,guestID);
            pr.setString(2, date);
            pr.setString(3, staffID);
            pr.setString(4, total);
            pr.executeUpdate();
            pr.close();
            
            connect.close();
        } catch (SQLException ex) {
            System.out.print("hello");
        }
 }
 public void getInforDetailInvoiceWithConditionDay()
    {
        arrId.clear();
        updateGuestCar gc=new updateGuestCar();
        upDateStaffPanel sp=new upDateStaffPanel();
        SimpleDateFormat sf=new SimpleDateFormat("dd-MM-yyyy");
        int sum=0;
        DefaultTableModel dtm=(DefaultTableModel)tbDetailInvoice.getModel();
        dtm.setRowCount(0);
        tbDetailInvoice.setModel(dtm);
         tbDetailInvoice.getColumnModel().getColumn(0).setPreferredWidth(30);
        tbDetailInvoice.getColumnModel().getColumn(1).setPreferredWidth(100);
        tbDetailInvoice.getColumnModel().getColumn(2).setPreferredWidth(60);
        tbDetailInvoice.getColumnModel().getColumn(3).setPreferredWidth(75);
        tbDetailInvoice.getColumnModel().getColumn(4).setPreferredWidth(40);
        tbDetailInvoice.setRowHeight(30);
        tbDetailInvoice.setAutoResizeMode(tbDetailInvoice.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select * from PhieuSuaXe";
        String checkDate=sf.format(cbDate.getSelectedDate().getTime());
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
             
            while(rs.next())
            {

                if(rs.getString(3).equals(checkDate))
                {
                v=new Vector();
                v.add(rs.getString(1));
                arrId.add(rs.getString(2));
                v.add(gc.changeIDGuestIntoName(rs.getString(2)));
                v.add(rs.getString(3));
                v.add(sp.getStaffNameFromID(rs.getString(4)));
                v.add(rs.getString(5));
                sum+=Integer.parseInt(rs.getString(5));
                dtm.addRow(v);
                }
            }
            lbTextMoneyForTotal.setText(String.valueOf(sum));
            tbDetailInvoice.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }         
    }
 public void getInforDetailInvoiceWithConditionMonth()
    {
        arrId.clear();
        updateGuestCar gc=new updateGuestCar();
        upDateStaffPanel sp=new upDateStaffPanel();
        SimpleDateFormat sf=new SimpleDateFormat("MM-yyyy");
        DefaultTableModel dtm=(DefaultTableModel)tbDetailInvoice.getModel();
        dtm.setRowCount(0);
        tbDetailInvoice.setModel(dtm);
         tbDetailInvoice.getColumnModel().getColumn(0).setPreferredWidth(30);
        tbDetailInvoice.getColumnModel().getColumn(1).setPreferredWidth(100);
        tbDetailInvoice.getColumnModel().getColumn(2).setPreferredWidth(60);
        tbDetailInvoice.getColumnModel().getColumn(3).setPreferredWidth(75);
        tbDetailInvoice.getColumnModel().getColumn(4).setPreferredWidth(40);
        tbDetailInvoice.setRowHeight(30);
        tbDetailInvoice.setAutoResizeMode(tbDetailInvoice.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select * from PhieuSuaXe";
        String checkDate=sf.format(cbDate.getSelectedDate().getTime());
        
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            int sum=0;
            while(rs.next())
            {
                if(rs.getString(3).substring(3, rs.getString(3).length()).equals(checkDate))
                {
                v=new Vector();
                v.add(rs.getString(1));
                arrId.add(rs.getString(2));
                v.add(gc.changeIDGuestIntoName(rs.getString(2)));
                v.add(rs.getString(3));
                v.add(sp.getStaffNameFromID(rs.getString(4)));
                sum+=Integer.parseInt(rs.getString(5));
                v.add(rs.getString(5));
                dtm.addRow(v);
                }
            }
            lbTextMoneyForTotal.setText(String.valueOf(sum));
            tbDetailInvoice.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }         
    }
 public String getIdGuest(int index)
 {
     int count=0;
     for (String id:arrId)
     {
         if(count==index)
         {
             setEverything(id);
             break;
         }
         count++;
         
     }
     return getEverything();
 }
 
 
 public String getIDInvoice(String idGuest)
 {
        Connection c=Connecting.Connect();
        String sql="Select MAPHIEU from PhieuSuaXe where MAKH='"+idGuest+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                 setEverything(rs.getString(1));
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getEverything();
 }
 public String getIDStaffWithIDInvoice(String idInvoice)
 {
        Connection c=Connecting.Connect();
        String sql="Select MANV from PhieuSuaXe Where MAPHIEU='"+idInvoice+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setEverything(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     return getEverything();
 }
  public int getTimesIDStaff(String idStaff)
 {
        Connection c=Connecting.Connect();
        String sql="Select MANV from PhieuSuaXe ";
        try {
            int count=0;
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                 if(rs.getString(1).equals(idStaff))
                 {
                     count++;
                 }
            }
            setTimes(count);
        
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getTimes();
 }
   public void updateTotalInvoice(String idInvoice,String total)
 {
   Connection c=Connect();
   String sql="update PhieuSuaXe set TONGTIEN=? where MAPHIEU=?";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, total);
            pr.setString(2, idInvoice);
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
 public void deleteInvoice(String invoiceID)
 {
        try {
            Connection connect=Connect();
            String sql=" delete from PhieuSuaXe where MAPHIEU=?";
            PreparedStatement pr=connect.prepareStatement(sql);
            pr.setString(1,invoiceID);
            pr.executeUpdate();
            pr.close();
            connect.close();
        } catch (SQLException ex) {
            System.out.print("hello");
        }
 }
      public static void main(String args[]) {
          JFrame a=new JFrame();
          updateDetailInvoice b=new updateDetailInvoice();
          a.add(b);
          a.setVisible(true);
          a.pack();
    }

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btReprint;
    private datechooser.beans.DateChooserCombo cbDate;
    private javax.swing.JComboBox<String> cbFormatDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    public javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbTextMoneyForTotal;
    private javax.swing.JLabel lbTxtTotal;
    private javax.swing.JPanel panelTool;
    private javax.swing.JTable tbDetailInvoice;
    private javax.swing.JTextField txtDelete;
    private javax.swing.JTextField txtReprint;
    // End of variables declaration//GEN-END:variables
}
