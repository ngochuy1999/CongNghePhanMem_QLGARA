/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnpm;

import static cnpm.Connecting.Connect;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class AddAccessoriesAndService extends javax.swing.JFrame {
    /**
     * 
     * 
     * Creates new form AddAccessoriesAndService
     */
    boolean check;

    public boolean isCheck() {
        return check;
    }

    public void setCheck(boolean check) {
        this.check = check;
    }
    int getQuantityStock;

    public int getGetQuantityStock() {
        return getQuantityStock;
    }

    public void setGetQuantityStock(int getQuantityStock) {
        this.getQuantityStock = getQuantityStock;
    }
    String getName;

    public String getGetName() {
        return getName;
    }

    public void setGetName(String getName) {
        this.getName = getName;
    }

    public AddAccessoriesAndService() {
        initComponents();
                tbAccessories.getTableHeader().setFont(new Font("DialogInput",Font.BOLD,14));
        tbAccessories.getTableHeader().setOpaque(false);
        tbAccessories.getTableHeader().setBackground(new Color(204, 204, 255));
        
        
                tbService.getTableHeader().setFont(new Font("DialogInput",Font.BOLD,14));
        tbService.getTableHeader().setOpaque(false);
        tbService.getTableHeader().setBackground(new Color(204, 204, 255));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbService = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbAccessories = new javax.swing.JTable();
        lbAddAccess = new javax.swing.JLabel();
        lbAddService = new javax.swing.JLabel();
        lbTextService = new javax.swing.JLabel();
        lbTextAccessories = new javax.swing.JLabel();
        lbNameCar = new javax.swing.JLabel();
        btExit = new javax.swing.JButton();
        btMinimize = new javax.swing.JButton();
        lbTextInforDetailInvoice = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbService.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SERVICE NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbService);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 242, 350, 310));

        tbAccessories.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbAccessories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ACCESSORY NAME", "QUANTITY", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbAccessories);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 390, 310));

        lbAddAccess.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\Iconplus_64.png")); // NOI18N
        lbAddAccess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbTextAccessoriesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbAddAccessMouseExited(evt);
            }
        });
        jPanel1.add(lbAddAccess, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 174, 60, 60));

        lbAddService.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\Iconplus_64.png")); // NOI18N
        lbAddService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbAddServiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbAddServiceMouseExited(evt);
            }
        });
        jPanel1.add(lbAddService, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 174, 60, 60));

        lbTextService.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        lbTextService.setForeground(new java.awt.Color(0, 51, 51));
        lbTextService.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTextService.setText("     Services");
        lbTextService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbTextServiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbTextServiceMouseExited(evt);
            }
        });
        jPanel1.add(lbTextService, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 190, 184, 35));

        lbTextAccessories.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        lbTextAccessories.setForeground(new java.awt.Color(0, 51, 51));
        lbTextAccessories.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTextAccessories.setText("     Accessories");
        lbTextAccessories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbTextAccessoriesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbTextAccessoriesMouseExited(evt);
            }
        });
        jPanel1.add(lbTextAccessories, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 190, 35));

        lbNameCar.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        lbNameCar.setForeground(new java.awt.Color(0, 0, 51));
        lbNameCar.setText("NAME CAR");
        jPanel1.add(lbNameCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 300, 40));

        btExit.setBackground(new java.awt.Color(255, 255, 255));
        btExit.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btExit.setForeground(new java.awt.Color(0, 0, 0));
        btExit.setText("X");
        btExit.setBorder(null);
        btExit.setBorderPainted(false);
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });
        jPanel1.add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 40, 30));

        btMinimize.setBackground(new java.awt.Color(255, 255, 255));
        btMinimize.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        btMinimize.setForeground(new java.awt.Color(0, 0, 0));
        btMinimize.setText("-");
        btMinimize.setBorder(null);
        btMinimize.setBorderPainted(false);
        btMinimize.setDefaultCapable(false);
        btMinimize.setFocusPainted(false);
        btMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMinimizeActionPerformed(evt);
            }
        });
        jPanel1.add(btMinimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 30, 30));

        lbTextInforDetailInvoice.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        lbTextInforDetailInvoice.setForeground(new java.awt.Color(51, 0, 0));
        lbTextInforDetailInvoice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTextInforDetailInvoice.setText("MANAGING YOUR SERVICE");
        jPanel1.add(lbTextInforDetailInvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 540, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public boolean checkValidateAccessory(AddAccessoryForCar a)
    {
        boolean check=true;
        boolean checkEmptyQuantity=true;
        boolean checkNotEnoughQuantity=true;
        boolean checkValidQuantity=true;
        boolean checkQuantityWithoutZero=true;
        
        String quantity=a.txtQuantity.getText();
                if (quantity.equals("0"))
                {
                    checkQuantityWithoutZero=false;
                    check=false;
                }
                
       if(checkQuantityWithoutZero==true)
       {
        for (int i=0;i<quantity.length();i++)
        {
              if(quantity.charAt(i)>=48 && quantity.charAt(i)<=57)
                {
                    checkValidQuantity=true;
                    
                }
                else
                {
                    checkValidQuantity=false;
                    check=false;
                    break;
                }
         }
       
        if(checkValidQuantity==true)
        {
            if(quantity.equals("QUANTITY*")|| quantity.isEmpty())
            {
                check=false;
                checkEmptyQuantity=false;
            }

            else if (Integer.valueOf(a.txtQuantity.getText())>getQuantityFromStock(String.valueOf(a.cbAccessoriName.getEditor().getItem())))
            {
                checkNotEnoughQuantity=false;
                check=false;
            }

        }
       }
        if(checkQuantityWithoutZero==false)
       {
           JOptionPane.showMessageDialog(null, "QUANTITY'S AT LEAST 1", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
       }
        else if(checkEmptyQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "PLEASE INSERT QUANTITY", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }
  
        else if (checkValidQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "QUANTITY IS NOT VALID", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }
        else if(checkNotEnoughQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "QUANTITY IN STOCK'S NOT ENOUGH", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }
        
        return check;
    }
        public boolean checkValidateAccessoryWithUpdate(AddAccessoryForCar a,String idAcess,String idCar)
    {
        boolean check=true;
        boolean checkEmptyQuantity=true;
        boolean checkNotEnoughQuantity=true;
        boolean checkValidQuantity=true;
        boolean checkQuantityWithoutZero=true;
        String quantity=a.txtQuantity.getText();
        if(quantity.equals("0"))
        {
            checkQuantityWithoutZero=false;
            check=false;
        }
         int t= Integer.parseInt(a.txtQuantity.getText())-getQuantityFromAccessoriDetail(idAcess, idCar);
         int k= getQuantityFromStockWithID(idAcess);
        if(checkQuantityWithoutZero==true)
        {

        for (int i=0;i<quantity.length();i++)
        {
              if(quantity.charAt(i)>=48 && quantity.charAt(i)<=57)
                {
                    checkValidQuantity=true;
                    
                }
                else
                {
                    checkValidQuantity=false;
                    check=false;
                    break;
                }
         }
        if(checkValidQuantity==true)
        {
                if(quantity.equals("QUANTITY*")|| quantity.isEmpty())
                {
                    check=false;
                    checkEmptyQuantity=false;
                }

                else if (t>k)
                {
                    checkNotEnoughQuantity=false;
                    check=false;
                }

                }

        } 

        if(checkQuantityWithoutZero==false)
       {
           JOptionPane.showMessageDialog(null, "QUANTITY'S AT LEAST 1", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
       }
       else if(checkEmptyQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "PLEASE INSERT QUANTITY", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }

        else if (checkValidQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "QUANTITY IS NOT VALID", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }
        else if(checkNotEnoughQuantity==false)
        {
            JOptionPane.showMessageDialog(null, "QUANTITY IN STOCK'S NOT ENOUGH", "ADDING FALIED", JOptionPane.ERROR_MESSAGE);
        }
        
        return check;
    }
    private void lbTextAccessoriesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTextAccessoriesMouseEntered
        // TODO add your handling code here:
        lbTextAccessories.setForeground(Color.red);
    }//GEN-LAST:event_lbTextAccessoriesMouseEntered

    private void lbTextAccessoriesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTextAccessoriesMouseExited
        // TODO add your handling code here:
        lbTextAccessories.setForeground(new Color(0,51,51));
    }//GEN-LAST:event_lbTextAccessoriesMouseExited

    private void lbTextServiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTextServiceMouseEntered
        // TODO add your handling code here:
        lbTextService.setForeground(Color.red);
    }//GEN-LAST:event_lbTextServiceMouseEntered

    private void lbTextServiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbTextServiceMouseExited
        // TODO add your handling code here:
        lbTextService.setForeground(new Color(0,51,51));
    }//GEN-LAST:event_lbTextServiceMouseExited

    private void lbAddAccessMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbAddAccessMouseExited
        // TODO add your handling code here:
         lbTextAccessories.setForeground(new Color(0,51,51));
    }//GEN-LAST:event_lbAddAccessMouseExited

    private void lbAddServiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbAddServiceMouseEntered
        // TODO add your handling code here:
         lbTextService.setForeground(Color.red);
    }//GEN-LAST:event_lbAddServiceMouseEntered

    private void lbAddServiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbAddServiceMouseExited
        // TODO add your handling code here:
        lbTextService.setForeground(new Color(0,51,51));
    }//GEN-LAST:event_lbAddServiceMouseExited

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        dispose();       // TODO add your handling code here:
    }//GEN-LAST:event_btExitActionPerformed

    private void btMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMinimizeActionPerformed
        setState(this.ICONIFIED)    ;    // TODO add your handling code here:
        //Minimize JFrame
    }//GEN-LAST:event_btMinimizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAccessoriesAndService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAccessoriesAndService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAccessoriesAndService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAccessoriesAndService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAccessoriesAndService().setVisible(true);
            }
        });
    }
    public void addAccessForEveryCar(String idAccessori,String idCar,String quantity)
    {
        
        try {
            Connection connect=Connecting.Connect();
            String sql1=" insert into ChiTietLinhKien values (?,?,?)";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            pr1.setString(1, idAccessori);
            pr1.setString(2, idCar);
            pr1.setString(3, quantity);
            pr1.executeUpdate();
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }
    public boolean checkExistForServiceEachCar(String idService, String idCar)
    {
        setCheck(true);
        try {
            Connection connect=Connecting.Connect();
            String sql1=" select * from ChiTietDichVu";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs1=pr1.executeQuery();
            while(rs1.next())
            {
                if(rs1.getString(1).equals(idService) && rs1.getString(2).equals(idCar) )
                {
                    setCheck(false);
                    break;
                }
            }
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return isCheck();
    }
    public void addServiceForEveryCar(String idService,String idCar)
    {
       
        try {
            Connection connect=Connecting.Connect();
            String sql1=" insert into ChiTietDichVu values (?,?)";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            pr1.setString(1, idService);
            pr1.setString(2, idCar);
            pr1.executeUpdate();
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
 public void getInforAccessoriesDetail(String idCar)
    {
        DefaultTableModel dtm=(DefaultTableModel)tbAccessories.getModel();
        dtm.setRowCount(0);
        tbAccessories.setModel(dtm);
        tbAccessories.getColumnModel().getColumn(0).setPreferredWidth(170);
        tbAccessories.getColumnModel().getColumn(1).setPreferredWidth(35);
        tbAccessories.getColumnModel().getColumn(2).setPreferredWidth(40);
       tbAccessories.setAutoResizeMode(tbAccessories.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select MALK,SOLUONGLK from ChiTietLinhKien where MAXE='"+idCar+"'";
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            String malk;
            while(rs.next())
            {
                v=new Vector();
                malk=rs.getString(1);
                v.add(changeIDAccessoryIntoNameAccessory(rs.getString(1)));
                v.add(rs.getString(2));
                v.add(String.valueOf(getAccessoriesPrice(rs.getString(1))*Integer.parseInt(rs.getString(2))));
                dtm.addRow(v);
            }

          
           tbAccessories.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            System.out.println("HELLO");
        }
        
    }
// public void updateQuantity(String id,String)
 public int getAccessoriesPrice(String idAccessories)
 {
        try {
            Connection c=Connecting.Connect();
            String sql="Select DONGIA from LinhKien where MALK='"+idAccessories+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
                  
           while(rs.next())
           {
               setName(rs.getString(1));
           }
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Integer.parseInt(getName());
 }
 public void updateQuantity(String idAccess,String idCar,String quantity)
 {
     
        try {
            Connection c=Connecting.Connect();
            String sql="update ChiTietLinhKien set SOLUONGLK=? where MALK=? and MAXE=?";
             PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, String.valueOf(Integer.parseInt(quantity)+getQuantityFromAccessoriDetail(idAccess,idCar)));
            pr.setString(2, idAccess);
            pr.setString(3, idCar);
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
 
  public void updateQuantityWithBtUpdate(String idAccess,String idCar,String quantity)
 {
     
        try {
            Connection c=Connecting.Connect();
            String sql="update ChiTietLinhKien set SOLUONGLK=? where MALK=? and MAXE=?";
             PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, quantity);
            pr.setString(2, idAccess);
            pr.setString(3, idCar);
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
   public int getQuantityFromAccessoriDetail(String idAccessories,String idCar)
 {
        try {
            Connection c=Connecting.Connect();
            String sql="Select SOLUONGLK from ChiTietLinhKien where MALK='"+idAccessories+"' and "+"MAXE='"+idCar+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
                  
           while(rs.next())
           {
               setName(rs.getString(1));
           }
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Integer.parseInt(getName());
 }
    public int getQuantityFromStockWithID(String idAccessories)
 {
        try {
            Connection c=Connecting.Connect();
            String sql="Select SOLUONG from LinhKien where MALK='"+idAccessories+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery(); 
           while(rs.next())
           {
               setName(rs.getString(1));
           }
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Integer.parseInt(getName());
 }
  public int getServicePrice(String idService)
 {
        try {
            Connection c=Connecting.Connect();
            String sql="Select DONGIA from DichVu where MADV='"+idService+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
                  
           while(rs.next())
           {
               setName(rs.getString(1));
           }
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Integer.parseInt(getName());
 }
 
  public void getInforServiceDetail(String idCar)
    {
        DefaultTableModel dtm=(DefaultTableModel)tbService.getModel();
        dtm.setRowCount(0);
        tbService.setModel(dtm);
        tbService.getColumnModel().getColumn(0).setPreferredWidth(250);
         tbService.getColumnModel().getColumn(1).setPreferredWidth(100);
       tbService.setAutoResizeMode(tbService.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select MADV from ChiTietDichVu where MAXE='"+idCar+"'";
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                v=new Vector();
                v.add(changeIDServiceIntoNameService(rs.getString(1)));
                v.add(String.valueOf(getServicePrice(rs.getString(1))));
                dtm.addRow(v);
            }
          tbService.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            System.out.println("HELLO");
        }
        
    }
  
  
       public String changeIDServiceIntoNameService(String id)
{
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select TENDV from DichVu where MADV='"+id+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetName(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return getGetName();
}
       
       
     public String changeIDAccessoryIntoNameAccessory(String id)
{
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select TENLK from LinhKien where MALK='"+id+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetName(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return getGetName();
}
   
     
     
     public int getQuantityFromStock(String AccessName)
     {
        try {
            Connection c=Connecting.Connect();
            String sql="Select SOLUONG FROM LinhKien Where MALK='"+changeNameAccessoryIntoIDAccessory(AccessName)+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetQuantityStock(Integer.parseInt(rs.getString(1)));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getGetQuantityStock();
     }
     

  public String changeNameServiceIntoIDService(String nameService)
{
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select MADV from DichVu where TENDV like N'%"+nameService+"%'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetName(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return getGetName();
}
     
  public boolean checkExist(String idAccess,String idCar)
  {
        try {
            setCheck(false);
            Connection c=Connecting.Connect();
            String sql="Select MALK from ChiTietLinhKien where MAXE='"+idCar+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                if(rs.getString(1).equals(idAccess))
                {
                    setCheck(true);
                    break;
                }
            }
           
        } catch (SQLException ex) {
            Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
        }
         return isCheck();
  }
         public String changeNameAccessoryIntoIDAccessory(String id)
{
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select MALK from LinhKien where TENLK like N'%"+id+"%'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetName(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return getGetName();
}
         public void subtractQuantity(String idAccess, String quantity )
         {
             updateAccessoriesPanel a=new updateAccessoriesPanel();
                    try {
                        Connection c=Connecting.Connect();
                        String sql="update LinhKien set SOLUONG=? where MALK=?";
                         PreparedStatement pr=c.prepareStatement(sql);
                       
                 
                        pr.setString(1, String.valueOf(getQuantityFromStockWithID(idAccess)-Integer.parseInt(quantity)));
                        pr.setString(2, idAccess);
                        pr.executeUpdate();
                        pr.close();
                        c.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(AddAccessoriesAndService.class.getName()).log(Level.SEVERE, null, ex);
                    }
              
         }
   public void deleteAccessDetail(String idAccess, String idCar)
  {
      Connection c=Connect();
      String sql="delete from ChiTietLinhKien where MALK=? and MAXE=?";
      PreparedStatement pr;
        try {
            pr = c.prepareStatement(sql);
             pr.setString(1, idAccess);
             pr.setString(2, idCar);
             pr.executeUpdate();
             pr.close();
             c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  }
   public ArrayList<String> getAccessoryIDfromIDCar(String idCar)
   {
       ArrayList<String> arrTemp=new ArrayList<>();
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select MALK from ChiTietLinhKien where MAXE='"+idCar+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                arrTemp.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return arrTemp;
   }
      public ArrayList<String> getServiceIDfromIDCar(String idCar)
   {
       ArrayList<String> arrTemp=new ArrayList<>();
        try {
            Connection c=Connecting.Connect();
            //TRUY SUẤT CÓ DẤU NÊN PHẢI DÙNG LỆNH KHÁC 
            String sql="Select MADV from ChiTietDichVu where MAXE='"+idCar+"'";
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                arrTemp.add(rs.getString(1));
            }
        } catch (SQLException ex) {
            System.out.print("HELLLO");
        }
        return arrTemp;
   }
   public void deleteServiceDetail(String idService, String idCar)
  {
      Connection c=Connect();
      String sql="delete from ChiTietDichVu where MADV=? and MAXE=?";
      PreparedStatement pr;
        try {
            pr = c.prepareStatement(sql);
             pr.setString(1, idService);
             pr.setString(2, idCar);
             pr.executeUpdate();
             pr.close();
             c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  }
      public void deleteAllServiceDetail( String idCar)
  {
      Connection c=Connect();
      String sql="delete from ChiTietDichVu where MAXE=?";
      PreparedStatement pr;
        try {
            pr = c.prepareStatement(sql);
             pr.setString(1, idCar);
             pr.executeUpdate();
             pr.close();
             c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExit;
    private javax.swing.JButton btMinimize;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lbAddAccess;
    public javax.swing.JLabel lbAddService;
    public javax.swing.JLabel lbNameCar;
    public javax.swing.JLabel lbTextAccessories;
    private javax.swing.JLabel lbTextInforDetailInvoice;
    public javax.swing.JLabel lbTextService;
    public javax.swing.JTable tbAccessories;
    public javax.swing.JTable tbService;
    // End of variables declaration//GEN-END:variables
}
