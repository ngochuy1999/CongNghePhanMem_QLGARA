/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnpm;

import static cnpm.Connecting.Connect;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Image;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import static com.itextpdf.text.pdf.PdfDictionary.FONT;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.File;
//import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.DocFlavor;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.ImageIOUtil;

/**
 *
 * @author USER
 */
public class Bill extends javax.swing.JFrame {
    String idBill,date,guestName,guestPhone,staffName,dateDetail;

    public String getDateDetail() {
        return dateDetail;
    }

    public void setDateDetail(String dateDetail) {
        this.dateDetail = dateDetail;
    }
    String getEverything,link;
//    ArrayList<String> every=new ArrayList<>();
//
//    public ArrayList<String> getEvery() {
//        return every;
//    }
//
//    public void setEvery(ArrayList<String> every) {
//        this.every = every;
//    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }
    ArrayList<String> arr=new ArrayList<>();
    
    public String getGetEverything() {
        return getEverything;
    }

    public void setGetEverything(String getEverything) {
        this.getEverything = getEverything;
    }

    public String getStaffName() {
        return staffName;
    }

    public void setStaffName(String staffName) {
        this.staffName = staffName;
    }

    public String getIdBill() {
        return idBill;
    }

    public void setIdBill(String idBill) {
        this.idBill = idBill;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getGuestName() {
        return guestName;
    }

    public void setGuestName(String guestName) {
        this.guestName = guestName;
    }

    public String getGuestPhone() {
        return guestPhone;
    }

    public void setGuestPhone(String guestPhone) {
        this.guestPhone = guestPhone;
    }
    
    /**
     * Creates new form Test
     */

    public Bill() {
        initComponents();
        tbDetail.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDetail = new javax.swing.JTable();
        lbBill = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Decription", "Car 's Name", "Quantity", "Unit Price", "Line Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbDetail);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 548, 220));

        lbBill.setPreferredSize(new java.awt.Dimension(750, 900));
        jPanel1.add(lbBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 510, 550));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void createInvoice()
{
            updateDetailInvoice di=new updateDetailInvoice();
            updateGuestCar gc=new updateGuestCar();
           setLink(getGuestName());
           String idInVoice=di.getIDInvoice(gc.changeNameGuestIntoId(getGuestName(),getGuestPhone()));
           Document a=new Document();
            try {
               PdfWriter t= PdfWriter.getInstance(a, new FileOutputStream("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Bill PDF\\"+idInVoice+"_"+getLink()+".pdf"));
                a.open();
                a.setMargins(20,20, 0, 10);
                //FONT SIZE
              BaseFont courier = BaseFont.createFont(BaseFont.COURIER, BaseFont.CP1252, BaseFont.EMBEDDED);
            Font cellFont = new Font(courier, 12, Font.NORMAL);
            //const tring regex_match_arabic_hebrew = @"[\u0600-\u06FF,\u0590-\u05FF]+";

            //CÓ DẤU NÈ
            BaseFont nationalBase = BaseFont.createFont("C:\\Windows\\Fonts\\times.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
            Font timeBoldItalic12 = new Font(nationalBase, 12f, Font.BOLDITALIC);
            Font timeBoldItalic13 = new Font(nationalBase, 13f, Font.BOLDITALIC);
            Font timeBoldItalic11 = new Font(nationalBase, 11f, Font.BOLDITALIC);
             Font timeBoldItalic19 = new Font(nationalBase, 9f, Font.BOLDITALIC);
             Font timeNormal10 = new Font(nationalBase, 10f, Font.NORMAL);
            Font timeNormal11 = new Font(nationalBase, 11f, Font.NORMAL);
            Font timeNormal12 = new Font(nationalBase, 12f, Font.NORMAL);
                Font fontStyle_Bolditalic11 =  FontFactory.getFont(FontFactory.HELVETICA, 11f, Font.BOLDITALIC);
                Font fontStyle_12=  FontFactory.getFont(FontFactory.HELVETICA, 12f, Font.NORMAL);
                Font fontBoldItalicStyle_12=  FontFactory.getFont(FontFactory.HELVETICA, 12f, Font.BOLDITALIC);
                Font fontStyle_Bold115=  FontFactory.getFont(FontFactory.HELVETICA, 15f, Font.BOLD);
                Font fontStyle_Bold117 =  FontFactory.getFont(FontFactory.HELVETICA, 17f, Font.BOLD);
                
               // FONT PARAGRAPH AND Chunk 
                  //INVOICE NUMBER

              Paragraph textInvoiceNo= new Paragraph();
               textInvoiceNo.setFont(timeNormal12);
               textInvoiceNo.add("\nInvoice No.: ") ;
               idInVoice=di.getIDInvoice(gc.changeNameGuestIntoId(getGuestName(),getGuestPhone()));
               System.out.println("afakfa"+idInVoice);
               textInvoiceNo.add(idInVoice) ;
               textInvoiceNo.setAlignment(Paragraph.ALIGN_RIGHT);
                  
                 // COMPANY TITLE and Date
                Paragraph textNameCompanyTitle= new Paragraph();
               textNameCompanyTitle.setFont(timeNormal12);
               textNameCompanyTitle.add("Company's Name: ") ;
               textNameCompanyTitle.setFont(timeBoldItalic19);
               textNameCompanyTitle.add("BHD GARAGE");
               textNameCompanyTitle.setFont(fontStyle_12);
               
       
               
               // COMPANY ADDRESS
               Paragraph textNameCompanyAddress= new Paragraph();
               textNameCompanyAddress.setFont(timeNormal12);
               textNameCompanyAddress.add("Company's Address: ") ;
               textNameCompanyAddress.setFont(timeBoldItalic19);
               textNameCompanyAddress.add("97 MAN THIEN, DISTRICT 9, HCM CITY");
               
                //COMPANY TELEPHONE
               Paragraph textNameCompanyTelephone= new Paragraph();
               textNameCompanyTelephone.setFont(timeNormal12);
               textNameCompanyTelephone.add("Company's Phone: ") ;
               textNameCompanyTelephone.setFont(timeBoldItalic19);
               textNameCompanyTelephone.add("1800 2250");
               
    
               //INFORGUEST
                        // GUEST'S NAME 
               Paragraph textGuestName= new Paragraph();
               textGuestName.setFont(timeNormal12);
               textGuestName.add("\n\nGuest's Name: ") ;
               textGuestName.setFont(timeBoldItalic12);
               textGuestName.add(getGuestName()) ;
               
                        // GUEST'S PHONE 
               Paragraph textGuestPhone= new Paragraph();
               textGuestPhone.setFont(timeNormal12);
               textGuestPhone.add("Guest's Phone: ") ;
               textGuestPhone.setFont(timeBoldItalic12);
               textGuestPhone.add(getGuestPhone());
               
                // ALIGHT PARAGRAP
//                text.setAlignment(Paragraph.ALIGN_CENTER);
//                textCompany.setAlignment(Paragraph.ALIGN_LEFT);
                

                
                //IMAGE
                  Image img = Image.getInstance("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\title.png");
                  img.scaleAbsolute(520,70 );
                  
                  
                  //TABLE CONTENT
               Paragraph textTableContent= new Paragraph();
               textTableContent.setFont(timeBoldItalic12);
               textTableContent.add("\nDETAIL SERVICE TALBLE ") ;
               textTableContent.setAlignment(Paragraph.ALIGN_CENTER);
               
                  // TABLE
                  int total=0;
                getInforDetail();
                PdfPTable table=new PdfPTable(5);
                table.setWidthPercentage(100);
                table.setSpacingBefore(11f);
                table.setSpacingAfter(11f);
                
                
                String temp=getIDGuest(getGuestName());
                getIDCar(temp); 
                getInforDetail();
                float[] col={150f,140f,40f,50f,50f};
                table.setWidths(col);
                
                PdfPCell c1=new PdfPCell(new Paragraph("               Decription",timeBoldItalic12));
                PdfPCell c2=new PdfPCell(new Paragraph("               Car's Name",timeBoldItalic12));
                PdfPCell c3=new PdfPCell(new Paragraph("Quantity",timeBoldItalic12));
                PdfPCell c4=new PdfPCell(new Paragraph(" Unit Price",timeBoldItalic12));
                PdfPCell c5=new PdfPCell(new Paragraph(" Line Total",timeBoldItalic12));
              
                table.addCell(c1);
                table.addCell(c2);
                table.addCell(c3);
                table.addCell(c4);
                table.addCell(c5);
                table.setHorizontalAlignment(c1.ALIGN_CENTER);
                table.setHorizontalAlignment(c2.ALIGN_CENTER);
                table.setHorizontalAlignment(c3.ALIGN_CENTER);
                table.setHorizontalAlignment(c4.ALIGN_CENTER);
                table.setHorizontalAlignment(c5.ALIGN_CENTER);
               for (int i=0;i<tbDetail.getRowCount();i++)
                {
            
                 String a1=tbDetail.getValueAt(i, 0).toString();
                 String a2=tbDetail.getValueAt(i, 1).toString();
                 String a3=tbDetail.getValueAt(i, 2).toString();
                 String a4=tbDetail.getValueAt(i, 3).toString();
                 String a5=tbDetail.getValueAt(i, 4).toString();
                 total+=Integer.parseInt(a5);
                c1=new PdfPCell(new Paragraph(a1,timeNormal11));
                c2=new PdfPCell(new Paragraph(a2,timeNormal11));
                c3=new PdfPCell(new Paragraph(a3,timeNormal11));
                c4=new PdfPCell(new Paragraph(a4,timeNormal11));
                c5=new PdfPCell(new Paragraph(a5,timeNormal11));
                
                table.addCell(c1);
                table.addCell(c2);
                table.addCell(c3);
                table.addCell(c4);
                table.addCell(c5);
                }
                
         // TOTAL
               // TOTAL PRICE
               Paragraph textSubTotal= new Paragraph();
               textSubTotal.setFont(timeNormal12);
               textSubTotal.add("Subtotal (VND): ") ;
               textSubTotal.setFont(timeBoldItalic12);
               textSubTotal.add(String.valueOf(total));
               updateTotal(idInVoice, String.valueOf(total));
               di.updateTotalInvoice(di.getIDInvoice(gc.changeNameGuestIntoId(getGuestName(),getGuestPhone())), String.valueOf(total));
               textSubTotal.setAlignment(Paragraph.ALIGN_RIGHT);
;
                
                
         // COMMENT       
                    //1
             Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                Paragraph textComment=new Paragraph();
               textComment.setFont(timeNormal10);
               textComment.add("\n\n\nPlease Make all cheques payable to BHD GARAGE ") ;
               textComment.add("\n"+getStaffName()) ;
               textComment.add("\nInvoice Date: ");
               textComment.add(String.valueOf(sdf.format(cal.getTime())));
               textComment.setFont(timeBoldItalic12);
               textComment.add("\n THANK YOU FOR YOUR BUSSINESS!");
               textComment.setAlignment(Paragraph.ALIGN_CENTER);
               
                //ADD
                a.add(img);
                a.add(textInvoiceNo);
                a.add(textNameCompanyTitle);
                a.add(textNameCompanyAddress);
                a.add(textNameCompanyTelephone);
                a.add(textGuestName);
                a.add(textGuestPhone);
                a.add(textTableContent);
                a.add(table); 
                a.add(textSubTotal);
                a.add(textComment);


                openFilePDF(getGuestName(),idInVoice);
               
                  a.close();
                  t.close();
              
            } catch (DocumentException ex) {
                Logger.getLogger(Bill.class.getName()).log(Level.SEVERE, null, ex);
            }
        catch (FileNotFoundException ex) {
            Logger.getLogger(Bill.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (IOException ex) {
            Logger.getLogger(Bill.class.getName()).log(Level.SEVERE, null, ex);
        } 
}
  private void updateTotal(String idInvoice,String total)
 {
   Connection c=Connect();
   String sql="update PhieuSuaXe set TONGTIEN=? where MAPHIEU=' "+idInvoice+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, total);
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
   public void getInforDetail()
    {
        DefaultTableModel dtm=(DefaultTableModel)tbDetail.getModel();
        updateGuestCar gc=new updateGuestCar();
        updateService se=new updateService();
        updateAccessoriesPanel ap=new updateAccessoriesPanel();
        dtm.setRowCount(0);
        tbDetail.setModel(dtm);
        tbDetail.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbDetail.getColumnModel().getColumn(1).setPreferredWidth(150);
        tbDetail.getColumnModel().getColumn(2).setPreferredWidth(10);
        tbDetail.getColumnModel().getColumn(3).setPreferredWidth(20);
        tbDetail.getColumnModel().getColumn(3).setPreferredWidth(20);
        tbDetail.setAutoResizeMode(tbDetail.AUTO_RESIZE_LAST_COLUMN);
        Vector v;

        for(String id:arr)
        {
        Connection c=Connecting.Connect();
        String sql="Select MALK,SOLUONGLK from ChiTietLinhKien where MAXE='"+id+"'";
        String sqlService="Select MADV from ChiTietDichVu where MAXE='"+id+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            String idCar;
            while(rs.next())
            {
                v=new Vector();
                v.add(ap.getAccessName(rs.getString(1)));
                idCar=rs.getString(1);
                v.add(gc.getNameCarFromId(id));
                System.out.println("nè dm"+idCar);
                int quantity=Integer.parseInt(rs.getString(2));
                v.add(rs.getString(2));
                 System.out.println("nè dmgsr"+quantity);
                 
                            String sql1="Select DONGIA from LinhKien where MALK='"+idCar+"'";
                            PreparedStatement pr1=c.prepareStatement(sql1);
                            ResultSet rs1=pr1.executeQuery();
                            while(rs1.next())
                            {
                                v.add(rs1.getString(1));
                                v.add(String.valueOf(Integer.parseInt(rs1.getString(1))*quantity));
    
                            }
              dtm.addRow(v);
            }
            
            
            PreparedStatement prService=c.prepareStatement(sqlService);
            ResultSet rsService=prService.executeQuery();
            String idService;
            while(rsService.next())
            {
                v=new Vector();
                v.add(se.getNameServiceFromId(rsService.getString(1)));
                idService=rsService.getString(1);
                v.add(gc.getNameCarFromId(id));
                v.add("1");
     
                            String sqlService1="Select DONGIA from DichVu where MADV='"+idService+"'";
                            PreparedStatement prService1=c.prepareStatement(sqlService1);
                            ResultSet rsService1=prService1.executeQuery();
                            while(rsService1.next())
                            {
                                v.add(rsService1.getString(1));
                                v.add(rsService1.getString(1));
    
                            }
              dtm.addRow(v);
            }
         
            tbDetail.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }
        
    }
   public void openFilePDF(String nameFile,String idInvoice)
   {
        try {
            //text file, should be opening in default text editor
            File file = new File("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Bill PDF\\"+idInvoice+"_"+nameFile+".pdf");
            
            //first check if Desktop is supported by Platform or not
            if(!Desktop.isDesktopSupported()){
                System.out.println("Desktop is not supported");
                return;
            }
            
            Desktop desktop = Desktop.getDesktop();
            if(file.exists()) desktop.open(file);
            
            //let's try to open PDF file
            file = new File("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Bill PDF\\"+nameFile+".pdf");
            if(file.exists()) desktop.open(file);
        } catch (IOException ex) {
            Logger.getLogger(Bill.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
   public void getIDCar(String idGuest)
   {
       Connection c=Connecting.Connect();
        String sql="select MAXE from XeKhach where MAKH='"+idGuest+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                String temp=String.valueOf(rs.getString(1));
                arr.add(temp);
            }
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
 
   public String getIDGuest(String guestName)
   {
       Connection c=Connecting.Connect();
        String sql="Select MAKH from KhachHang where TENKH like N'%" + guestName + "%'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                setGetEverything(rs.getString(1));     
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        return getGetEverything();
   }
   
   
    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bill().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel lbBill;
    public javax.swing.JTable tbDetail;
    // End of variables declaration//GEN-END:variables
}
