/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnpm;

import static cnpm.Connecting.Connect;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class updateBill extends javax.swing.JPanel {
String guestName;
String staffName;

    public String getGuestName() {
        return guestName;
    }

    public void setGuestName(String guestName) {
        this.guestName = guestName;
    }

    public String getStaffName() {
        return staffName;
    }

    public void setStaffName(String staffName) {
        this.staffName = staffName;
    }

 
    /**
     * Creates new form updateAccessoriesPanel
     */
    public updateBill() {
        initComponents();
        getInforBill();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbBill = new javax.swing.JTable();
        btAdd = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\search_30px.png")); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 120, 41, 40));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 403));

        tbBill.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tbBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BILL ID", "GUEST'S NAME", "DATE", "STAFF'S NAME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBill.setRowHeight(24);
        tbBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbBillMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbBill);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 178, 705, 321));

        btAdd.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btAdd.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_plus_min1111111us_32.png")); // NOI18N
        btAdd.setText("ADD BILL");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });
        add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 113, -1, 46));

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(386, 119, 240, 41));
    }// </editor-fold>//GEN-END:initComponents

    private void tbBillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbBillMouseClicked
        // TODO add your handling code here:
        DefaultTableModel dtm=(DefaultTableModel)tbBill.getModel();
        AddAccessories a=new AddAccessories();
        int index=tbBill.getSelectedRow();
        if (evt.getClickCount()==2)
        {
            a.setVisible(true);
                        //Dinh Dang lai Form dang ki
                        a.btAdd.setVisible(false);
                        a.lbAdd.setVisible(false);
                        a.btUpdate.setVisible(true);
                        a.lbUpdate.setVisible(true);
                        a.btDelete.setVisible(true);
                        a.lbDelete.setVisible(true);
                        a.panelRegister.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black), "Updating", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 24), new java.awt.Color(255, 255, 102)));
            
                        //SET GIÁ TRỊ CHO CÁC TRƯỜNG
                        //ID
                        String id=String.valueOf(tbBill.getValueAt(index, 0));
            
                        //NAME Accessories
                        a.txtAccessoriesName.setText(String.valueOf(tbBill.getValueAt(index, 1)));
            
                        //Combox Brand
                       String brandid=String.valueOf(tbBill.getValueAt(index, 2));
                       //getBrandName(brandid);
               
                        
                        
                        
                        //QUANTITY
                        a.txtQuantity.setText(String.valueOf(tbBill.getValueAt(index, 3)));
                        a.txtQuantity.setFont(new Font("Dialog",Font.BOLD,16));
                        a.txtQuantity.setForeground(Color.black);

                        
                         //PRICE
                        a.txtPrice.setText(String.valueOf(tbBill.getValueAt(index, 4)));
                        a.txtPrice.setFont(new Font("Dialog",Font.BOLD,16));
                        a.txtPrice.setForeground(Color.black);
                   
                        //BrandName;
                        getBrandID(String.valueOf(tbBill.getValueAt(index, 2)));
                        a.btUpdate.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent arg0) {
  
                                        int countfull=0;
                                        int countvalid=0;

                                        //ACCESSORIES'S NAME 
                                        boolean checkEmptyAccessoriesName=true;
                                        boolean checkAccessories=true;
                                        String name=a.txtAccessoriesName.getText().trim().replaceAll("\\s+", " ").toUpperCase();
                                        if(name.equals("ACCESSORIES NAME*") || name.isEmpty())
                                        {
                                            countfull++;
                                            checkEmptyAccessoriesName=false;
                                        }
                                        else if (name.length()>30)
                                        {
                                            countvalid++;
                                            checkAccessories=false;
                                        }

                                        //QUANTITY
                                        boolean checkEmptyQuantity=true;
                                        boolean checkQuantity=true;
                                        String quantity=a.txtQuantity.getText();
                                        if(quantity.equals("QUANTITY*") || quantity.isEmpty())
                                        {

                                            countfull++;
                                            checkEmptyQuantity=false;
                                        }
                                        else 
                                        {
                                            for (int i=0;i<quantity.length();i++)
                                            {

                                                if (quantity.charAt(i)>=48 && quantity.charAt(i)<=57)
                                                {
                                                    checkQuantity=true;
                                                }
                                                else
                                                {
                                                    checkQuantity=false;
                                                    countvalid++;
                                                    break;
                                                }
                                            }
                                        }


                                       String brand=String.valueOf(a.cbBrandName.getEditor().getItem());
                                       getBrandID(brand);

                                        //PRICE
                                        String price=a.txtPrice.getText();
                                        boolean checkEmptyPrice=true;
                                        boolean checkPrice=true;
                                        if(price.equals("PRICE*") || price.isEmpty())
                                        {

                                            countfull++;
                                            checkEmptyPrice=false;
                                        }
                                        else 
                                        {
                                            for (int i=0;i<price.length();i++)
                                            {

                                                if (price.charAt(i)>=48 && price.charAt(i)<=57)
                                                {
                                                    checkPrice=true;
                                                }
                                                else
                                                {
                                                    checkPrice=false;
                                                    countvalid++;
                                                    break;
                                                }
                                            }
                                        }
                                    if(countfull!=0 || countvalid!=0)
                                    {
                                         a.setSize(600,330);
                                        //NAME ACCESSORIES
                                        if(checkEmptyAccessoriesName==false)
                                        {

                                            a.lbErrorAccessNameEmpty.setVisible(true);
                                            a.lbErrorAccessName.setVisible(false);
                                        }
                                        else if(checkAccessories==false)
                                        {
                                            a.lbErrorAccessNameEmpty.setVisible(false);
                                            a.lbErrorAccessName.setVisible(true);
                                        }
                                        else
                                        {
                                            a.lbErrorAccessNameEmpty.setVisible(false);
                                            a.lbErrorAccessName.setVisible(false);
                                        }

                                        //QUANTITY
                                        if(checkEmptyQuantity==false)
                                        {
                                            a.lbErrorQuantityEmpty.setVisible(true);
                                            a.lBErrorQuantity.setVisible(false);
                                        }
                                        else if(checkQuantity==false)
                                        {
                                            a.lBErrorQuantity.setVisible(true);
                                            a.lbErrorQuantityEmpty.setVisible(false);
                                        }
                                        else
                                        {
                                            a.lBErrorQuantity.setVisible(false);
                                            a.lbErrorQuantityEmpty.setVisible(false);
                                        }

                                        //PRICE
                                        if(checkEmptyPrice==false)
                                        {
                                            a.lbErrorPriceEmpty.setVisible(true);
                                            a.lbErrorPrice.setVisible(false);
                                        }
                                        else if(checkPrice==false)
                                        {
                                            a.lbErrorPrice.setVisible(true);
                                            a.lbErrorPriceEmpty.setVisible(false);
                                        }
                                        else
                                        {
                                            a.lbErrorPrice.setVisible(false);
                                            a.lbErrorPriceEmpty.setVisible(false);
                                        }
                                    }
                                     else   if(countvalid==0 && countfull==0)
                                        {
                                            a.setSize(400,330);
                               
                                            JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                                             a.dispose();
//                                            getInforAccessories();

                                        }
                                    }
                            });
        
                  
                a.btDelete.addActionListener(new ActionListener()
                        {
                                public void actionPerformed(ActionEvent e)
                                {
                
                                        deleteAccessories(id);
                                        JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                                        a.dispose();
//                                        getInforAccessories();
                                     
                                    }
                            });
    }

    }//GEN-LAST:event_tbBillMouseClicked

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        AddAccessories rm=new AddAccessories();
        rm.setVisible(true);
        rm.btAdd.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent t)
                {
                    int countfull=0;
                    int countvalid=0;

                    //ACCESSORIES'S NAME 
                    boolean checkEmptyAccessoriesName=true;
                    boolean checkAccessories=true;
                    String name=rm.txtAccessoriesName.getText().trim().replaceAll("\\s+", " ").toUpperCase();
                    if(name.equals("ACCESSORIES NAME*") || name.isEmpty())
                    {
                        countfull++;
                        checkEmptyAccessoriesName=false;
                    }
                    else if (name.length()>30)
                    {
                        countvalid++;
                        checkAccessories=false;
                    }

                    //USER
                    boolean checkEmptyQuantity=true;
                    boolean checkQuantity=true;
                    String quantity=rm.txtQuantity.getText();
                    if(quantity.equals("QUANTITY*") || quantity.isEmpty())
                    {

                        countfull++;
                        checkEmptyQuantity=false;
                    }
                    else 
                    {
                        for (int i=0;i<quantity.length();i++)
                        {
                           
                            if (quantity.charAt(i)>=48 && quantity.charAt(i)<=57)
                            {
                                checkQuantity=true;
                            }
                            else
                            {
                                checkQuantity=false;
                                countvalid++;
                                break;
                            }
                        }
                    }

                   
                   String brand=String.valueOf(rm.cbBrandName.getEditor().getItem());
                    if(brand.isEmpty() )
                   {
                       brand="AUDI";
                   }
                   String brandid=new String();
                   getBrandID(brand);
                   //System.out.print(getBrandId());

                    //PHONE NUMBER
                    String price=rm.txtPrice.getText();
                    boolean checkEmptyPrice=true;
                    boolean checkPrice=true;
                    if(price.equals("PRICE*") || price.isEmpty())
                    {

                        countfull++;
                        checkEmptyPrice=false;
                    }
                    else 
                    {
                        for (int i=0;i<price.length();i++)
                        {
                           
                            if (price.charAt(i)>=48 && price.charAt(i)<=57)
                            {
                                checkPrice=true;
                            }
                            else
                            {
                                checkPrice=false;
                                countvalid++;
                                break;
                            }
                        }
                    }
                   
                    //NAME ACCESSORIES
                    if(checkEmptyAccessoriesName==false)
                    {

                        rm.lbErrorAccessNameEmpty.setVisible(true);
                        rm.lbErrorAccessName.setVisible(false);
                    }
                    else if(checkAccessories==false)
                    {
                        rm.lbErrorAccessNameEmpty.setVisible(false);
                        rm.lbErrorAccessName.setVisible(true);
                    }
                    else
                    {
                        rm.lbErrorAccessNameEmpty.setVisible(false);
                        rm.lbErrorAccessName.setVisible(false);
                    }

                    //QUANTITY
                    if(checkEmptyQuantity==false)
                    {
                        rm.lbErrorQuantityEmpty.setVisible(true);
                        rm.lBErrorQuantity.setVisible(false);
                    }
                    else if(checkQuantity==false)
                    {
                        rm.lBErrorQuantity.setVisible(true);
                        rm.lbErrorQuantityEmpty.setVisible(false);
                    }
                    else
                    {
                        rm.lBErrorQuantity.setVisible(false);
                        rm.lbErrorQuantityEmpty.setVisible(false);
                    }
                    
                    //PRICE
                    if(checkEmptyPrice==false)
                    {
                        rm.lbErrorPriceEmpty.setVisible(true);
                        rm.lbErrorPrice.setVisible(false);
                    }
                    else if(checkPrice==false)
                    {
                        rm.lbErrorPrice.setVisible(true);
                        rm.lbErrorPriceEmpty.setVisible(false);
                    }
                    else
                    {
                        rm.lbErrorPrice.setVisible(false);
                        rm.lbErrorPriceEmpty.setVisible(false);
                    }

                    if(countvalid==0 && countfull==0)
                    {
                        rm.setSize(400,330);
                
                        JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
//                        getInforAccessories();

                        //SET VE BAN DAU CHO CAC COMPONENT
                        //NAME ACCESSORIES
                        rm.txtAccessoriesName.setFont(new Font("Dubai Light", Font.ITALIC, 16));
                        rm.txtAccessoriesName.setForeground(new Color(133,173,173));
                        rm.txtAccessoriesName.setText("ACCESSORIES NAME*");

                        //QUANTITY
                        rm.txtQuantity.setFont(new Font("Dubai Light", Font.ITALIC, 16));
                        rm.txtQuantity.setForeground(new Color(133,173,173));
                        rm.txtQuantity.setText("QUANTITY*");

                        //
                        rm.txtPrice.setFont(new Font("Dubai Light", Font.ITALIC, 16));
                        rm.txtPrice.setForeground(new Color(133,173,173));
                        rm.txtPrice.setText("PRICE*");
                    }
                    else
                    {
                        rm.setSize(600,330);
                    }
                }
            });

    }//GEN-LAST:event_btAddActionPerformed
public void  filterData(String query)
{
    DefaultTableModel dtm= (DefaultTableModel)tbBill.getModel();
    TableRowSorter<DefaultTableModel> tr= new TableRowSorter<DefaultTableModel>(dtm);
    tbBill.setRowSorter(tr);
    tr.setRowFilter(RowFilter.regexFilter(query));
}
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String query=jTextField1.getText().toUpperCase();
        filterData(query);
    }//GEN-LAST:event_jTextField1KeyReleased
 public void getInforBill()
    {
        DefaultTableModel dtm=(DefaultTableModel)tbBill.getModel();
        dtm.setRowCount(0);
        tbBill.setModel(dtm);
        tbBill.getColumnModel().getColumn(0).setPreferredWidth(5);
        tbBill.getColumnModel().getColumn(1).setPreferredWidth(100);
        tbBill.getColumnModel().getColumn(2).setPreferredWidth(30);
        tbBill.getColumnModel().getColumn(3).setPreferredWidth(100);
        tbBill.getColumnModel().getColumn(4).setPreferredWidth(60);
        tbBill.setRowHeight(30);
        tbBill.setAutoResizeMode(tbBill.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select * from PhieuSuaXe";
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                v=new Vector();
                v.add(rs.getString(1));
                v.add(getGuestName(rs.getString(2)));
                v.add(rs.getString(3));
                v.add(getStaffName(rs.getString(4)));
                v.add(rs.getString(5));
                dtm.addRow(v);
            }
            tbBill.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
   public void deleteAccessories(String id)
     {
         Connection c=Connect();
         String sql="delete from LinhKien where MALK=?";
         PreparedStatement pr;
    try {
         pr = c.prepareStatement(sql);
         pr.setString(1, id);
            pr.executeUpdate();
            pr.close();
            c.close();
    } catch (SQLException ex) {
        System.out.print("HELLO");
    }
     }   
   private void createAccessories(String accessoriesName,String brandId,String quantity,String price)
    {
        try {
            Connection connect=Connect();
            String sql1=" insert into LinhKien values (?,?,?,?)";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            pr1.setString(1, accessoriesName);
            pr1.setString(2, brandId);
            pr1.setString(3, quantity);
            pr1.setString(4, price);
            pr1.executeUpdate();
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   private void getBrandID(String brandName)
   {
        try {
            Connection connect=Connect();
            String sql1=" select MAHANG From HangXe where TENHANG='"+brandName+"'";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs=pr1.executeQuery();
            while(rs.next())
            {
            
            }
            pr1.close();
            rs.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
      private String getGuestName(String GuestID)
   {
        try {
            Connection connect=Connect();
            String sql1=" select TENKH From KhachHang where MAKH='"+GuestID+"'";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs=pr1.executeQuery();
            while(rs.next())
            {
                setGuestName(rs.getString(1));
            
            }
            pr1.close();
            rs.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getGuestName();
   }
   private String getStaffName(String StaffID)
   {
        try {
            Connection connect=Connect();
            String sql1=" select TENNV From NhanVien where MANV='"+StaffID+"'";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs=pr1.executeQuery();
            while(rs.next())
            {
                setStaffName(rs.getString(1));
            
            }
            pr1.close();
            rs.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getStaffName();
   }
     private void updateAccessories(String accessoriesName,String brandID,String quantity,String price, String accessoriesID)
  {
   Connection c=Connect();
   String sql="update LinhKien set TENLK=?,MAHANG=?,SOLUONG=?,DONGIA=? where MALK=' "+accessoriesID+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, accessoriesName);
            pr.setString(2, brandID);
            pr.setString(3, quantity);
            pr.setString(4, price);
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
    public static void main(String[] args) {
        JFrame a=new JFrame();
        updateBill b=new updateBill();
        a.add(b);
        a.pack();
        a.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tbBill;
    // End of variables declaration//GEN-END:variables
}
