/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cnpm;

import static cnpm.Connecting.Connect;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author USER
 */
public class upDateStaffPanel extends javax.swing.JPanel {
RegisterMember a;
String userNameStaff;
String everything;



    public String getUserNameStaff() {
        return userNameStaff;
    }

    public void setUserNameStaff(String userNameStaff) {
        this.userNameStaff = userNameStaff;
    }

boolean check;



    public boolean isCheck() {
        return check;
    }

    public void setCheck(boolean check) {
        this.check = check;
    }
    public String getEverything() {
        return everything;
    }

    public void setEverything(String everything) {
        this.everything = everything;
    }

    /**
     * Creates new form NewJPanel
     */
    public upDateStaffPanel() {
        initComponents();
        tbStaff.getTableHeader().setFont(new Font("DialogInput",Font.BOLD,14));
        tbStaff.getTableHeader().setOpaque(false);
        tbStaff.getTableHeader().setBackground(new Color(204, 204, 255));
         jLabel1.setVisible(true);
       getInforStaff();


        
        //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        btAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbStaff = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 400));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\search_30px.png")); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 41, 40));

        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 240, 41));

        btAdd.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btAdd.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_plus_min1111111us_32.png")); // NOI18N
        btAdd.setText("ADD STAFF");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });
        add(btAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 158, 46));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(0, 403));

        tbStaff.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "USERNAME", "SEX", "POSITTION", "PHONE NUMBER", "DATE", "ADDRESS", "MAIL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbStaff.setRowHeight(24);
        tbStaff.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbStaffFocusGained(evt);
            }
        });
        tbStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbStaffMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbStaff);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 104, 1050, 450));
    }// </editor-fold>//GEN-END:initComponents
public void  filterData(String query)
{
    DefaultTableModel dtm= (DefaultTableModel)tbStaff.getModel();
    TableRowSorter<DefaultTableModel> tr= new TableRowSorter<DefaultTableModel>(dtm);
    tbStaff.setRowSorter(tr);
    tr.setRowFilter(RowFilter.regexFilter(query));
}
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String query=jTextField1.getText().toUpperCase();
        filterData(query);
    }//GEN-LAST:event_jTextField1KeyReleased

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        RegisterMember rm=new RegisterMember();
        rm.setVisible(true);

        rm.btRegister.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent t)
            {
           int countfull=0;
           int countvalid=0;
           
        //NAME
        boolean checkEmptyName=true;
        boolean checkName=true;
        String name=rm.txtName.getText().trim().replaceAll("\\s+", " ").toUpperCase();
        if(name.equals("NAME*") || name.isEmpty())
        {
            countfull++;
            checkEmptyName=false;
        }
        else if (name.length()>30)
        {
            countvalid++;
            checkName=false;
        }

        //USER
        boolean checkEmptyUserName=true;
        boolean checkExistingUserName=true;
        boolean checkUserName=true;
        String userName=rm.txtUsername.getText();
        if(userName.equals("USERNAME*") || userName.isEmpty())
        {
            
            countfull++;
            checkEmptyUserName=false;
        }
        else if(checkUserExisting(userName)==true)
        {
            checkExistingUserName=false;
            countvalid++;
        }
        else
        {
        for (int i=0;i<userName.length();i++)
        {
            if (userName.charAt(i)>=65 && userName.charAt(i)<=90)
            {
                checkUserName=true;
            }
            else if (userName.charAt(i)>=97 && userName.charAt(i)<=122)
            {
               checkUserName=true;
            }
            else if (userName.charAt(i)>=48 && userName.charAt(i)<=57)
            {
               checkUserName=true;
            }
            else
            {
                checkUserName=false;
                countvalid++;
                break;
             }
            }
         }

        //SEX
        String sex;
        if (rm.radioNam.isSelected())
        {
            sex="Nam";
        }
        else
        {
            sex="Nữ";
        }
        //POSITIon
        String position=new String ("Quản lí");
        position=rm.cbPosittion.getEditor().getItem().toString();
        if(position.isEmpty())
        {
            position="Quản lí";
        }
        //PHONE NUMBER
        String phoneNumber=rm.txtSDT.getText();
        boolean checkEmptyPhone=true;
        boolean checkPhoneNumber=true;
         if(phoneNumber.equals("PHONE NUMBER*") || phoneNumber.isEmpty())
        {
            checkEmptyPhone=false;
            countfull++;
        }
         else if (phoneNumber.charAt(0)!=48)
         {
          checkPhoneNumber=false;
          countvalid++;
         }
         else  if (phoneNumber.length()<10 || phoneNumber.length()>11)
        {
          checkPhoneNumber=false;
          countvalid++;
        }
         
        else if (phoneNumber.trim().replaceAll("\\s+", " ").equals(' '))
        {
            checkPhoneNumber=false;
            countvalid++;
        }
        else
         {
        for(int i=0;i<phoneNumber.length();i++)
        {
            
            if(phoneNumber.charAt(i)>=48 && phoneNumber.charAt(i)<=57 )
            {
                checkPhoneNumber=true;
            }
            else if(phoneNumber.charAt(i)==13)
            {
                checkPhoneNumber=true;
            }
            else if(phoneNumber.charAt(i)==32)
            {
                checkPhoneNumber=true;
            }
            else
            {
                checkPhoneNumber=false;
                countvalid++;
                break;
            }
        }
       }

        //Address
        boolean checkEmptyAddress=true;
        String address=rm.txtAddress.getText().trim().replaceAll("\\s+", " ").toUpperCase();
         if(address.equals("ADDRESS*") || address.isEmpty())
        {
            countfull++;
            checkEmptyAddress=false;
        }
        //Email
        boolean checkEmptyMail=true;
        boolean checkMail=true;
                
        String email=rm.txtEmail.getText().trim();
        if (email.equals("EMAIL*") || address.isEmpty())
        {
            countfull++;
            checkEmptyMail=false;
        }
        else if(checkEmail.testEmail(email)==false)
        {
            checkMail=false;
            countvalid++;
        }
        //Date
        String birth=rm.cbDate.getText();
        
        //PASSWORD
        String pass=rm.txtPassword.getText();
        String confirmPass=rm.txtPasswordAgain.getText();
        boolean checkEmptyPass=true;
        boolean checkPass=true;
        if(pass.equals("PASSWORD123456789") || pass.isEmpty())
        {
            countfull++;
            checkEmptyPass=false;
        }
        else if(!pass.equals(confirmPass))
        {
            checkPass=false;
            countvalid++;
        }
               
        //NAME ERROR
                if(checkEmptyName==false)
                {
                   
                   rm.lbErrorNameEmpty.setVisible(true);
                   rm.lbErrorNameInvalid.setVisible(false);
                }
                else if(checkName==false)
                {
                    rm.lbErrorNameEmpty.setVisible(false);
                    rm.lbErrorNameInvalid.setVisible(true);
                }
                else
                {
                    rm.lbErrorNameEmpty.setVisible(false);
                    rm.lbErrorNameInvalid.setVisible(false);
                }
                
        //ADDRESS ERROR
                if(checkEmptyAddress==false)
                {
                    rm.lbErrorAddressEmpty.setVisible(true);
                }
                else
                {
                    rm.lbErrorAddressEmpty.setVisible(false);
                }
                
       //MAIL ERROR
                if(checkEmptyMail==false)
                {
                    rm.lbErrorMailEmpty.setVisible(true);
                    rm.lbErrorMail.setVisible(false);
                }
                else if(checkMail==false)
                {
                    rm.lbErrorMailEmpty.setVisible(false);
                    rm.lbErrorMail.setVisible(true);
                }
                else
                {
                     rm.lbErrorMail.setVisible(false);
                    rm.lbErrorMailEmpty.setVisible(false);
                }
                
                
         //PASSWORD ERROR       
                if(checkEmptyPass==false)
                {
                    rm.lbErrorPassEmpty.setVisible(true);
                     rm.lbErrorPass.setVisible(false);
                }
                else if(checkPass==false)
                {
                    rm.lbErrorPass.setVisible(true);
                    rm.lbErrorPassEmpty.setVisible(false);
                }
                else
                {
                    rm.lbErrorPass.setVisible(false);
                    rm.lbErrorPassEmpty.setVisible(false);
                }
                
       //PHONENUMBER ERROR         
                if(checkEmptyPhone==false)
                {
                    rm.lbErrorPhoneEmpty.setVisible(true);
                    rm.lbErrorPhone.setVisible(false);
                }
                else if(checkPhoneNumber==false )
                {
                    rm.lbErrorPhoneEmpty.setVisible(false);
                    rm.lbErrorPhone.setVisible(true);
                }
                else
                {
                    rm.lbErrorPhone.setVisible(false);
                    rm.lbErrorPhoneEmpty.setVisible(false);
                }
                
                
         //USERNAME ERROR       
                if(checkEmptyUserName==false)
                {
                    rm.lbErrorUserName.setVisible(false);
                    rm.lbErrorUserNameEmpty.setVisible(true);
                    rm.lbErrorUserNameExisting.setVisible(false);
                }
                else if(checkExistingUserName==false)
                {
                    rm.lbErrorUserNameEmpty.setVisible(false);
                    rm.lbErrorUserName.setVisible(false);
                    rm.lbErrorUserNameExisting.setVisible(true);
                }
                else if(checkUserName==false)
                {
                    rm.lbErrorUserNameEmpty.setVisible(false);
                    rm.lbErrorUserName.setVisible(true);
                    rm.lbErrorUserNameExisting.setVisible(false);
                }
                else
                {
                    rm.lbErrorUserName.setVisible(false);
                    rm.lbErrorUserNameEmpty.setVisible(false);
                    rm.lbErrorUserNameExisting.setVisible(false);
                }
                
        if(countvalid==0 && countfull==0)
        {
           rm.setSize(400,600);
          createAccount(userName,  pass);
          createStaff(name, userName, sex, position, phoneNumber, birth, address, email,"0");
          JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
          getInforStaff();
          
          //SET VE BAN DAU CHO CAC COMPONENT
          //NAME
           rm.txtName.setFont(new Font("Dubai Light", Font.ITALIC, 16));
           rm.txtName.setForeground(new Color(133,173,173));
           rm.txtName.setText("NAME*"); 
          
           //USERNAME
           rm.txtUsername.setFont(new Font("Dubai Light", Font.ITALIC, 16));
           rm.txtUsername.setForeground(new Color(133,173,173));
           rm.txtUsername.setText("USERNAME*");   
           
          //PASSWORD
           rm.txtPassword.setFont(new Font("Dubai Light", Font.ITALIC, 16));
           rm.txtPassword.setForeground(new Color(133,173,173));
          rm. txtPassword.setText("PASSWORD123456789"); 
           
           // PASSAGAIN
           rm.txtPasswordAgain.setFont(new Font("Dubai Light", Font.ITALIC, 16));
          rm. txtPasswordAgain.setForeground(new Color(133,173,173));
           rm.txtPasswordAgain.setText("PASSWORD1234567890"); 
           
           //SDT
          rm. txtSDT.setFont(new Font("Dubai Light", Font.ITALIC, 16));
          rm. txtSDT.setForeground(new Color(133,173,173));
           rm.txtSDT.setText("PHONE NUMBER*"); 
           
           //ADDRESS
           rm.txtAddress.setFont(new Font("Dubai Light", Font.ITALIC, 16));
           rm.txtAddress.setForeground(new Color(133,173,173));
          rm. txtAddress.setText("ADDRESS*"); 
           
           //EMAIL
           rm.txtEmail.setFont(new Font("Dubai Light", Font.ITALIC, 16));
           rm.txtEmail.setForeground(new Color(133,173,173));
           rm.txtEmail.setText("EMAIL*"); 
           
        }
        else
        {
            rm.setSize(650,600);
        }
            }
        });
        
        
    }//GEN-LAST:event_btAddActionPerformed

    private void tbStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbStaffMouseClicked
            // TODO add your handling code here:
        DefaultTableModel dtm=(DefaultTableModel)tbStaff.getModel();
        int index=tbStaff.getSelectedRow();
        if (evt.getClickCount()==2)
        {
            a=new RegisterMember();
            a.setVisible(true);
                    
        //Dinh Dang lai Form dang ki
        a.btRegister.setVisible(false);
        a.lbRegister.setVisible(false);
        a.btChangePassWord.setVisible(true);
        a.btUpdate.setVisible(true);
        a.lbUpdate.setVisible(true);
        a.btDelete.setVisible(true);
        a.lbDelete.setVisible(true);
        a.txtPasswordAgain.setVisible(false);
        a.panelRegister.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black), "Updating", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 24), new java.awt.Color(255, 255, 102)));
        
        //SET GIÁ TRỊ CHO CÁC TRƯỜNG
        //ID
        String id=String.valueOf(tbStaff.getValueAt(index, 0));
         
        //NAME
        a.txtName.setText(String.valueOf(tbStaff.getValueAt(index, 1)));
        
      
        //USERNAME
        a.txtUsername.setText(String.valueOf(tbStaff.getValueAt(index, 2)));
        a.txtUsername.setFont(new Font("Dialog",Font.BOLD,16));
        a.txtUsername.setForeground(Color.black);
        a.txtUsername.setEnabled(false);
        
        //PASS
        a.txtPassword.setEnabled(false);
        
       //SEX
        String sex=String.valueOf(tbStaff.getValueAt(index, 3));
        if(sex.equals("Nữ"))
        {
            a.radioNu.setSelected(true);
        }
        else
        {
            a.radioNam.setSelected(true);
        }
        //Postition
        a.cbPosittion.setSelectedItem(String.valueOf(tbStaff.getValueAt(index, 4)));
        //PHONE NUMBER
        String phone=String.valueOf(tbStaff.getValueAt(index, 5));
        phone=phone.substring(0, phone.length()-4);
        a.txtSDT.setText(phone);
        a.txtSDT.setFont(new Font("Dialog",Font.BOLD,16));
         a.txtSDT.setForeground(Color.black);
        
        //DATE
        String date=String.valueOf(tbStaff.getValueAt(index, 6));
        Calendar day= Calendar.getInstance();
        day.set(Calendar.DATE, Integer.parseInt(date.substring(0, 2)));
        day.set(Calendar.MONTH, Integer.parseInt(date.substring(3, 5))-1);
        day.set(Calendar.YEAR, Integer.parseInt(date.substring(6, date.length())));
        a.cbDate.setSelectedDate(day);
        
        //ADDRESS
        a.txtAddress.setText(String.valueOf(tbStaff.getValueAt(index, 7)));
        a.txtAddress.setFont(new Font("Dialog",Font.BOLD,16));
         a.txtAddress.setForeground(Color.black);

        //MAIL
        a.txtEmail.setText(String.valueOf(tbStaff.getValueAt(index, 8)));
        a.txtEmail.setFont(new Font("Dialog",Font.BOLD,16));
         a.txtEmail.setForeground(Color.black);
        
        a.btUpdate.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent arg0) {
                         int countfull=0;
                         int countvalid=0;

                        //NAME
                        boolean checkEmptyName=true;
                        boolean checkName=true;
                        String name=a.txtName.getText().trim().replaceAll("\\s+", " ").toUpperCase();
                        if(name.equals("NAME*") || name.isEmpty())
                        {
                            countfull++;
                            checkEmptyName=false;
                        }
                        else if (name.length()>30)
                        {
                            countvalid++;
                            checkName=false;
                        }
                        
                          //SEX
                    String sex;
                    if (a.radioNam.isSelected())
                    {
                        sex="Nam";
                    }
                    else
                    {
                        sex="Nữ";
                    }
                    //POSITIon
                    String position=new String ("Quản lí");
                    position=a.cbPosittion.getEditor().getItem().toString();
                    if(position.isEmpty())
                    {
                        position="Quản lí";
                    }
                   //PHONE NUMBER
        String phoneNumber=a.txtSDT.getText();
        boolean checkEmptyPhone=true;
        boolean checkPhoneNumber=true;
         if(phoneNumber.equals("PHONE NUMBER*") || phoneNumber.isEmpty())
        {
            checkEmptyPhone=false;
            countfull++;
        }
         else if (phoneNumber.charAt(0)!=48)
         {
          checkPhoneNumber=false;
          countvalid++;
         }
         else  if (phoneNumber.length()<10 || phoneNumber.length()>11)
        {
          checkPhoneNumber=false;
          countvalid++;
        }
         
        else if (phoneNumber.trim().replaceAll("\\s+", " ").equals(' '))
        {
            checkPhoneNumber=false;
            countvalid++;
        }
        else
         {
        for(int i=0;i<phoneNumber.length();i++)
        {
            
            if(phoneNumber.charAt(i)>=48 && phoneNumber.charAt(i)<=57 )
            {
                checkPhoneNumber=true;
            }
            else if(phoneNumber.charAt(i)==13)
            {
                checkPhoneNumber=true;
            }
            else if(phoneNumber.charAt(i)==32)
            {
                checkPhoneNumber=true;
            }
            else
            {
                checkPhoneNumber=false;
                countvalid++;
                break;
            }
        }
       }

                    //Address
                    boolean checkEmptyAddress=true;
                    String address=a.txtAddress.getText().trim().replaceAll("\\s+", " ").toUpperCase();
                     if(address.equals("ADDRESS*") || address.isEmpty())
                    {
                        countfull++;
                        checkEmptyAddress=false;
                    }
                    //Email
                    boolean checkEmptyMail=true;
                    boolean checkMail=true;

                    String email=a.txtEmail.getText().trim();
                    if (email.equals("EMAIL*") || address.isEmpty())
                    {
                        countfull++;
                        checkEmptyMail=false;
                    }
                    else if(checkEmail.testEmail(email)==false)
                    {
                        checkMail=false;
                        countvalid++;
                    }
                    //Date
                    String birth=a.cbDate.getText();
                    //NAME ERROR
                if(checkEmptyName==false)
                {
                    a.lbErrorNameInvalid.setVisible(false);
                   a.lbErrorNameEmpty.setVisible(true);
                }
                else if(checkName==false)
                {
                    a.lbErrorNameEmpty.setVisible(false);
                    a.lbErrorNameInvalid.setVisible(true);
                }
                else
                {
                    a.lbErrorNameEmpty.setVisible(false);
                    a.lbErrorNameInvalid.setVisible(false);
                }
                
        //ADDRESS ERROR
                if(checkEmptyAddress==false)
                {
                    a.lbErrorAddressEmpty.setVisible(true);
                }
                else
                {
                    a.lbErrorAddressEmpty.setVisible(false);
                }
                
       //MAIL ERROR
                if(checkEmptyMail==false)
                {
                    a.lbErrorMailEmpty.setVisible(true);
                     a.lbErrorMail.setVisible(false);
                }
                else if(checkMail==false)
                {
                    a.lbErrorMailEmpty.setVisible(false);
                    a.lbErrorMail.setVisible(true);
                }
                else
                {
                     a.lbErrorMail.setVisible(false);
                    a.lbErrorMailEmpty.setVisible(false);
                }
        //PHONENUMBER ERROR         
                if(checkEmptyPhone==false)
                {
                    a.lbErrorPhone.setVisible(false);
                   a.lbErrorPhoneEmpty.setVisible(true);
                }
                else if(checkPhoneNumber==false )
                {
                    a.lbErrorPhoneEmpty.setVisible(false);
                    a.lbErrorPhone.setVisible(true);
                }
                else
                {
                    a.lbErrorPhone.setVisible(false);
                    a.lbErrorPhoneEmpty.setVisible(false);
                }
                if(countfull==0 && countvalid==0)
                {
                    updateStaff11(name, position, sex, birth, phoneNumber, address, email, id);
                     a.setSize(400, 600);
                 
                    JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                        a.dispose();
                   getInforStaff();
                }
                else
                {
                    a.setSize(600, 600);
                }
                         


                   }
        });
        
        a.btChangePassWord.addActionListener(new ActionListener(){
                        public void actionPerformed(ActionEvent e)
                        {
                            changePassWord b=new changePassWord();
                            b.setUser(a.txtUsername.getText());
                            b.txtUsername.setText(b.getUser());
                            b.setVisible(true);
                            b.lbShowConfir.setVisible(true);
                            b.lbShowPass.setVisible(true);
                        }
                });
        
        a.btDelete.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                if(getUserNameStaff().equals(String.valueOf(tbStaff.getValueAt(index, 2))))
                {
                    JOptionPane.showMessageDialog(null, "YOU CAN'T DELETE YOUSELF","ERROR",JOptionPane.ERROR_MESSAGE);
                }
                else if (checkStaffIDForInvoice(id)==true)
                {
                    updateStateStaffInto1(id);
                    JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                    getInforStaff();
                    a.dispose();
                }
                else
                {
                deleteAccount(String.valueOf(tbStaff.getValueAt(index, 2)));
                deleteStaff(id);
                JOptionPane.showMessageDialog(null,"SUCCESSFUL","BINGO!",JOptionPane.PLAIN_MESSAGE,new ImageIcon("C:\\Users\\USER\\Desktop\\Môn Lớp\\Kĩ Thuật phần mềm\\Image\\icons8_good_quality_32.png"));
                a.dispose();
                getInforStaff();
                }
            }
        });
        }
    }//GEN-LAST:event_tbStaffMouseClicked

    private void tbStaffFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbStaffFocusGained
        // TODO add your handling code here:
        jLabel1.setVisible(false);
    }//GEN-LAST:event_tbStaffFocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        jLabel1.setVisible(true);
    }//GEN-LAST:event_jTextField1FocusLost

   public void deleteStaff(String id)
     {
         Connection c=Connect();
         String sql="delete from NhanVien where MANV=?";
        
            PreparedStatement pr;
    try {
        pr = c.prepareStatement(sql);
         pr.setString(1, id);
            pr.executeUpdate();
            pr.close();
            c.close();
    } catch (SQLException ex) {
        Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
    }
           
        
     }
  public String getStateStaff(String idStaff)
  {
       try {
            Connection connect=Connect();
            String sql1=" select TRANGTHAI from NhanVien where MANV=' "+idStaff+"'";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs1=pr1.executeQuery();
            while(rs1.next())
            {
                setEverything(rs1.getString(1));
            }
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
      return getEverything();
  }
      
    public void getInforStaff()
    {
        DefaultTableModel dtm=(DefaultTableModel)tbStaff.getModel();
        dtm.setRowCount(0);
        tbStaff.setModel(dtm);
        tbStaff.getColumnModel().getColumn(0).setPreferredWidth(10);
        tbStaff.getColumnModel().getColumn(1).setPreferredWidth(150);
        tbStaff.getColumnModel().getColumn(2).setPreferredWidth(60);
        tbStaff.getColumnModel().getColumn(3).setPreferredWidth(25);
        tbStaff.getColumnModel().getColumn(4).setPreferredWidth(60);
        tbStaff.getColumnModel().getColumn(5).setPreferredWidth(100);
        tbStaff.getColumnModel().getColumn(6).setPreferredWidth(40);
        tbStaff.getColumnModel().getColumn(7).setPreferredWidth(70);
        tbStaff.getColumnModel().getColumn(8).setPreferredWidth(150);
        tbStaff.setRowHeight(30);
        tbStaff.setAutoResizeMode(tbStaff.AUTO_RESIZE_LAST_COLUMN);
        Connection c=Connecting.Connect();
        String sql="Select * from NhanVien";
        Vector v;
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
                if(rs.getString(10).equals("0"))
                {
                v=new Vector();
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));
                v.add(rs.getString(8));
                v.add(rs.getString(9));
                dtm.addRow(v);
                }
            }
            tbStaff.setModel(dtm);
            rs.close();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private void updateStaff11(String name,String posittion,String sex, String date,String phoneNumber, String address, String email,String idStaff)
 {
   Connection c=Connect();
   String sql="update NhanVien set TENNV=?,CHUCVU=?, GIOITINH=?,NGAYSINH=?,SDT=?, DIACHI=?, EMAIL=? where MANV=' "+idStaff+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, name);
            pr.setString(2, posittion);
            pr.setString(3, sex);
            pr.setString(4, date);
            pr.setString(5, phoneNumber);
            pr.setString(6, address);
            pr.setString(7, email);
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
     
 }
  private void deleteAccount(String userName)
  {
      Connection c=Connect();
      String sql="delete from Account where USERNAME=?";
      PreparedStatement pr;
        try {
            pr = c.prepareStatement(sql);
             pr.setString(1, userName);
             pr.executeUpdate();
             pr.close();
             c.close();
        } catch (SQLException ex) {
            Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
     
  }
  public void updateStateStaffInto1(String idStaff)
  {
      Connection c=Connect();
   String sql="update NhanVien set TRANGTHAI=? where MANV=' "+idStaff+"'";
        try {
            PreparedStatement pr=c.prepareStatement(sql);
            pr.setString(1, "1");;
            pr.executeUpdate();
            pr.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
     private void createAccount(String userName,String password)
    {
        try {
            Connection connect=Connect();
            String sql1=" insert into Account values (?,?)";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            pr1.setString(1, userName);
            pr1.setString(2, password);
            pr1.executeUpdate();
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public boolean checkStaffIDForInvoice(String idStaff)
    {
        setCheck(false);
        try {
            Connection connect=Connect();
            String sql1=" select MANV from PhieuSuaXe ";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs1=pr1.executeQuery();
            while(rs1.next())
            {
                if(rs1.getString(1).equals(idStaff))
                {
                    setCheck(true);
                    break;
                }
            }
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
        return isCheck();
    }
      public String getStaffIDFromName(String staffName )
    {
        try {
            Connection connect=Connect();
            String sql=" select MANV from NhanVien where TENNV like N'%" + staffName + "%'";
            PreparedStatement pr=connect.prepareStatement(sql);
            ResultSet rs=pr.executeQuery();
            while(rs.next())
            {
             setEverything(rs.getString(1));
            }

            pr.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getEverything();
    }
      public String getStaffNameFromID(String staffID )
    {
        try {
            Connection connect=Connect();
            String sql1=" select TENNV from NhanVien where MANV='"+staffID+"'";
            PreparedStatement pr1=connect.prepareStatement(sql1);
            ResultSet rs1=pr1.executeQuery();
            while(rs1.next())
            {
             setEverything(rs1.getString(1));
            }
            pr1.close();
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
        return getEverything();
    }
     
   private void createStaff(String name,String userName,String sex,String position,String phoneNumber,String date,String address,String email,String status)
 {
        try {
            Connection connect=Connect();
            String sql=" insert into NhanVien (TENNV,USERNAME,GIOITINH,CHUCVU,SDT,NGAYSINH,DIACHI,EMAIL,TRANGTHAI) values (?,?,?,?,?,?,?,?,?)";
            PreparedStatement pr=connect.prepareStatement(sql);
            pr.setString(1, name);
            pr.setString(2, userName);
            pr.setString(3, sex);
            pr.setString(4, position);
            pr.setString(5, phoneNumber);
            pr.setString(6, date);
            pr.setString(7, address);
            pr.setString(8, email);
            pr.setString(9, status);
            pr.executeUpdate();
            pr.close();
            connect.close();
        } catch (SQLException ex) {
            Logger
 .getLogger(RegisterMember.class.getName()).log(Level.SEVERE, null, ex);
        }
 }
   public boolean checkUserExisting(String user)
   {
    try {
        setCheck(false);
        Connection c=Connect();
        String sql="select USERNAME from Account";
        PreparedStatement pr=c.prepareStatement(sql);
        ResultSet rs=pr.executeQuery();
        while(rs.next())
        {
            if(rs.getString(1).equals(user))
            {
                setCheck(true);
                break;
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(upDateStaffPanel.class.getName()).log(Level.SEVERE, null, ex);
    }
        return isCheck();
   }
    public static void main(String[] args) {
        JFrame a=new JFrame();
        a.add(new upDateStaffPanel());
        a.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tbStaff;
    // End of variables declaration//GEN-END:variables
}
